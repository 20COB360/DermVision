// Home.js
import * as React from "react";
import { View, Text, StyleSheet, Image, Button } from "react-native";
import { useState } from "react";
import Header from "../components/Header";
import * as ImagePicker from "expo-image-picker";
import axios from "axios";
import { firebase_auth, firebase_db } from "../firebaseConfig";
import { ref, set, push } from "firebase/database";

function Home() {
  const [image, setImage] = useState(null);
  const [responseText, setResponseText] = useState('');

  const diseaseNames = [
    "Browen's Disease (akiec)",
    "Basal Cell Carcinoma (bcc)",
    "Benign Keratosis (bkl)",
    "Dermatofibroma (df)",
    "Melanoma (mel)",
    "Melanocytic Nevi (nv)",
    "Vascular Lesions (vasc)"
  ];

  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: false,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
      uploadImage(result.assets[0].uri);
    }
  };

  const uploadImage = async (uri) => {
    try {
      const uploadUrl = 'http://10.11.44.72:5000/process_image';
      const formData = new FormData();
      formData.append('image', {
        uri,
        type: 'image/jpeg',
        name: 'predict.jpg',
      });

      const response = await axios.post(uploadUrl, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      const diseaseName = diseaseNames[response.data.message];
      setResponseText(diseaseName);
      
      // Save the prediction to Firebase
      savePrediction(uri, diseaseName);
    } catch (error) {
      console.error('Error uploading image:', error);
    }
  };

  const savePrediction = async (imageUri, prediction) => {
    try {
      const userId = firebase_auth.currentUser.uid;
      const predictionRef = ref(firebase_db, `users/${userId}/predictions`);
      const newPredictionRef = push(predictionRef);

      await set(newPredictionRef, {
        imageUri,
        prediction,
        date: new Date().toISOString()
      });

      console.log('Prediction saved to Firebase');
    } catch (error) {
      console.error('Error saving prediction:', error);
    }
  };

  return (
    <View style={styles.wrapper}>
      <Header />
      <View style={styles.container}>
        {image && <Image source={{ uri: image }} style={styles.image} />}
        <Button
          style={styles.button}
          title="Upload Image"
          onPress={pickImage}
        />
        {responseText && <Text style={styles.response}>Prediction: {responseText}</Text>}
      </View>

      <View style={styles.bottombox}>
        <Text style={styles.bottomtext}>
          This output is generated by a machine learning model with an 85%
          accuracy rate.
        </Text>
        <Text style={styles.bottomtext}>
          For a definitive diagnosis, it is recommended to consult a
          dermatologist.
        </Text>
      </View>
    </View>
  );
}

export default Home;

const styles = StyleSheet.create({
  wrapper: {
    height: "100%",
    backgroundColor: "beige",
  },
  container: {
    marginTop: 20,
    alignItems: "center",
    justifyContent: "center",
  },
  image: {
    width: 200,
    height: 200,
    margin: 10,
    borderWidth: 3,
    borderColor: "green",
  },
  button: {
    width: 1000,
    margin: 10,
  },
  prediction: {
    margin: 10,
    fontWeight: "bold",
    fontSize: 20,
    textAlign: "center",
  },
  bottomtext: {
    textAlign: "center",
    color: "red",
    fontWeight: "bold",
  },
  bottombox: {
    width: "100%",
    backgroundColor: "black",
    padding: 10,
    position: "absolute",
    bottom: 0,
  },
  response:{
    fontSize: 20,
    fontWeight:'bold',
    marginTop:10,
  }
});
